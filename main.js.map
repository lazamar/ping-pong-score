{"version":3,"names":[],"mappings":"","sources":["main.js"],"sourcesContent":["class Score {\n  constructor(banner, addBtn, removeBtn, turnController) {\n    this.banner = banner;\n    this.turnController = turnController;\n\n    this.addBtn = addBtn;\n    this.addBtn.addEventListener('click', () => {\n      this.add(1);\n    });\n\n    this.removeBtn = removeBtn;\n    this.removeBtn.addEventListener('click', () => {\n      this.remove(1);\n    });\n\n    this.score = 0;\n    this.reset();\n  }\n\n  reset() {\n    this._updateScore(0);\n  }\n\n  add(amount = 1) {\n    const newScore = this.score + amount;\n    this._updateScore(newScore);\n  }\n\n  remove(amount = 1) {\n    const newScore = this.score - amount;\n    this._updateScore(newScore);\n  }\n\n  _updateScore(newScore) {\n    if (typeof newScore !== 'number') {\n      throw new Error(`Invalid socore value: ${newScore}`);\n    } if (newScore < 0) {\n      this._blinkRed();\n      return false;\n    }\n\n    const scoreDiff = newScore - this.score;\n    if (scoreDiff > 0) {\n      for (let i = 0; i < scoreDiff; i++) {\n        this.turnController.next();\n      }\n    } else {\n      const absoluteDiff = Math.abs(scoreDiff);\n      for (let i = 0; i < absoluteDiff; i++) {\n        this.turnController.prev();\n      }\n    }\n\n    this.score = newScore;\n    this.banner.textContent = newScore;\n    return true;\n  }\n\n  _blinkRed() {\n    console.log('Pretend it is blinking');\n  }\n}\n\nclass TurnController {\n  constructor(turnContainer, playerCount = 2) {\n    this.turnContainer = turnContainer;\n    this.setParticipantCount(playerCount);\n    this.reset();\n  }\n\n  reset() {\n    this._setTurn(1);\n  }\n\n  next() {\n    // Make counting start from 0;\n    const currTurn = this.turn - 1;\n    // Turn starting from zero.\n    const nextTurnUnormalised = (currTurn + 1) % this.playerCount;\n    // Turn starting from 1.\n    const nextTurn = nextTurnUnormalised + 1;\n    this._setTurn(nextTurn);\n  }\n\n  prev() {\n    // Make counting start from 0;\n    const currTurn = this.turn - 1;\n    // Turn starting from zero.\n    // We add playerCount to make the number never be negative.\n    const prevTurnUnormalised = (this.playerCount + currTurn - 1) % this.playerCount;\n    // Turn starting from 1.\n    const prevTurn = prevTurnUnormalised + 1;\n    this._setTurn(prevTurn);\n  }\n\n  setParticipantCount(playerCount) {\n    if (typeof playerCount !== 'number') {\n      throw new Error(`Invalid participant number: ${playerCount}`);\n    }\n\n    if ((playerCount % 2) !== 0) {\n      console.error(`Invalid participant number: ${playerCount}.\n        Participants number must be pair.`);\n    }\n\n    this.playerCount = playerCount;\n  }\n\n  _setTurn(turnNumber = 1) {\n    if (typeof turnNumber !== 'number') {\n      throw new Error(`Invalid turn number: ${turnNumber}`);\n    }\n\n    this.turn = turnNumber;\n    this.turnContainer.textContent = turnNumber;\n  }\n}\n\n\nfunction init() {\n  const turnContainer = document.querySelector('.pp-header_turn');\n  const turnController = new TurnController(turnContainer, 4);\n\n  const banners = document.querySelectorAll('.pp-score_number');\n  const addBtns = document.querySelectorAll('.pp-score_add');\n  const removeBtns = document.querySelectorAll('.pp-score_remove');\n\n  const score1 = new Score(banners[0], addBtns[0], removeBtns[0], turnController);\n  const score2 = new Score(banners[1], addBtns[1], removeBtns[1], turnController);\n\n  const resetBtn = document.querySelector('.pp-reset_button');\n  resetBtn.addEventListener('click', () => {\n    score1.reset();\n    score2.reset();\n    turnController.reset();\n  });\n}\n\ninit();\n"],"file":"main.js","sourceRoot":"/source/"}